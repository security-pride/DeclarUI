import router from '@ohos.router';

interface MusicItem {
  title: string;
  artist: string;
  image: Resource;
}

interface Artist {
  name: string;
  image: Resource;
}

@Entry
@Component
struct ExplorePage {
  @State recommendedMusic: MusicItem[] = [
    { title: 'Baghi 3', artist: 'Various Artists', image: $r('app.media.template') },
    { title: 'Surma Surma', artist: 'Various Artists', image: $r('app.media.template') },
    { title: 'Hindi T', artist: 'Various Artists', image: $r('app.media.template') }
  ];
  @State recentlyPlayed: MusicItem[] = [
    { title: 'No Time To Die', artist: 'Various Artists', image: $r('app.media.template') },
    { title: 'Illegal Weapon', artist: 'Various Artists', image: $r('app.media.template') },
    { title: 'Loca', artist: 'Various Artists', image: $r('app.media.template') }
  ];
  @State newReleases: MusicItem[] = [
    { title: 'Baghi 3', artist: 'Various Artists', image: $r('app.media.template') },
    { title: 'Baghi 3', artist: 'Various Artists', image: $r('app.media.template') }
  ];
  @State popularArtists: Artist[] = [
    { name: 'Justin Bieber', image: $r('app.media.template') },
    { name: 'Michael Jackson', image: $r('app.media.template') },
    { name: 'Sam Smith', image: $r('app.media.template') }
  ];
  @State genres: string[] = ['Hip Hop', 'Pop', 'Partyholics'];

  build() {
    Column() {
      Row() {
        Text('9:41')
          .fontSize(16)
          .fontWeight(FontWeight.Medium)
        Row() {
          Image($r('app.media.template')).width(16).height(16)
          Image($r('app.media.template')).width(16).height(16)
        }
      }
      .width('100%')
      .justifyContent(FlexAlign.SpaceBetween)
      .padding({ left: 16, right: 16, top: 8 })

      Text('Explore')
        .fontSize(24)
        .fontWeight(FontWeight.Bold)
        .margin({ top: 16, bottom: 16, left: 16 })

      Scroll() {
        Column() {
          this.RecommendedSection()
          this.RecentPlayedSection()
          this.NewReleasedSection()
          this.PopularArtistSection()
          this.GenresMoodsSection()
        }
      }
      .height('85%')

      Row() {
        Column() {
          Image($r('app.media.template')).width(24).height(24)
          Text('Home').fontSize(12)
        }.onClick(() => {})

        Column() {
          Image($r('app.media.template')).width(24).height(24)
          Text('Trending').fontSize(12)
        }.onClick(() => {
          router.pushUrl({ url: 'pages/TrendingPage' })
        })

        Column() {
          Image($r('app.media.template')).width(24).height(24)
          Text('Search').fontSize(12)
        }.onClick(() => {
          router.pushUrl({ url: 'pages/SearchPage' })
        })

        Column() {
          Image($r('app.media.template')).width(24).height(24)
          Text('Library').fontSize(12)
        }.onClick(() => {})

        Column() {
          Image($r('app.media.template')).width(24).height(24)
          Text('Settings').fontSize(12)
        }.onClick(() => {})
      }
      .width('100%')
      .justifyContent(FlexAlign.SpaceAround)
      .padding({ top: 8, bottom: 8 })
    }
  }

  @Builder
  RecommendedSection() {
    Column() {
      Text('Recomanded for you')
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .margin({ left: 16, bottom: 8 })

      List() {
        ForEach(this.recommendedMusic, (item: MusicItem) => {
          ListItem() {
            Column() {
              Image(item.image)
                .width(120)
                .height(120)
                .borderRadius(8)
              Text(item.title).fontSize(14).margin({ top: 4 })
              Text(item.artist).fontSize(12).fontColor(Color.Gray)
            }
            .width(120)
            .margin({ right: 16 })
          }
          .onClick(() => {
            router.pushUrl({ url: 'pages/NowPlayingPage' })
          })
        })
      }
      .listDirection(Axis.Horizontal)
      .margin({ left: 16 })
    }
  }

  @Builder
  RecentPlayedSection() {
    Column() {
      Text('Recent Played')
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .margin({ left: 16, top: 24, bottom: 8 })

      List() {
        ForEach(this.recentlyPlayed, (item: MusicItem) => {
          ListItem() {
            Row() {
              Image(item.image)
                .width(60)
                .height(60)
                .borderRadius(8)
              Column() {
                Text(item.title).fontSize(16)
                Text(item.artist).fontSize(14).fontColor(Color.Gray)
              }.margin({ left: 16 })
            }
            .width('100%')
            .padding(8)
          }
          .onClick(() => {
            router.pushUrl({ url: 'pages/NowPlayingPage' })
          })
        })
      }
      .margin({ left: 16, right: 16 })
    }
  }

  @Builder
  NewReleasedSection() {
    Column() {
      Text('New Released')
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .margin({ left: 16, top: 24, bottom: 8 })

      List() {
        ForEach(this.newReleases, (item: MusicItem) => {
          ListItem() {
            Column() {
              Image(item.image)
                .width(160)
                .height(160)
                .borderRadius(8)
              Text(item.title).fontSize(16).margin({ top: 4 })
              Text(item.artist).fontSize(14).fontColor(Color.Gray)
            }
            .width(160)
            .margin({ right: 16 })
          }
          .onClick(() => {
            router.pushUrl({ url: 'pages/NowPlayingPage' })
          })
        })
      }
      .listDirection(Axis.Horizontal)
      .margin({ left: 16 })
    }
  }

  @Builder
  PopularArtistSection() {
    Column() {
      Text('Popular Artist')
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .margin({ left: 16, top: 24, bottom: 8 })

      List() {
        ForEach(this.popularArtists, (artist: Artist) => {
          ListItem() {
            Column() {
              Image(artist.image)
                .width(100)
                .height(100)
                .borderRadius(50)
              Text(artist.name).fontSize(14).margin({ top: 4 })
            }
            .width(100)
            .margin({ right: 16 })
          }
        })
      }
      .listDirection(Axis.Horizontal)
      .margin({ left: 16 })
    }
  }

  @Builder
  GenresMoodsSection() {
    Column() {
      Text('Genres & Moods')
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .margin({ left: 16, top: 24, bottom: 8 })

      Flex({ wrap: FlexWrap.Wrap, justifyContent: FlexAlign.Start }) {
        ForEach(this.genres, (genre: string) => {
          Button(genre)
            .fontSize(14)
            .fontColor(Color.Black)
            .backgroundColor('#FF69B4')
            .margin({ right: 8, bottom: 8 })
            .padding({ left: 16, right: 16, top: 8, bottom: 8 })
            .borderRadius(16)
        })
      }
      .margin({ left: 16, right: 16 })
    }
  }
}