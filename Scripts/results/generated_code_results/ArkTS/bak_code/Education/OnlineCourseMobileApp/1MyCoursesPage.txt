import router from '@ohos.router';

@Entry
@Component
struct MyCoursesPage {
  @State currentTab: number = 0;
  @State ongoingCourses: Course[] = [
    { title: 'Graphics Designer for Beginner', instructor: 'Nicola Tesla', rating: 4.9, reviewsCount: 1435, progress: 82, sessions: '7 / 15' },
    { title: 'Graphics Designer for Beginner', instructor: 'Nicola Tesla', rating: 4.9, reviewsCount: 1435, progress: 82, sessions: '7 / 15' },
    { title: 'Graphics Designer for Beginner', instructor: 'Nicola Tesla', rating: 4.9, reviewsCount: 1435, progress: 82, sessions: '7 / 15' }
  ];

  build() {
    Column() {
      // Header
      Row() {
        Text('My Courses')
          .fontSize(20)
          .fontWeight(FontWeight.Bold)
        Blank()
        Badge({ count: 1, position: BadgePosition.Right, style: { color: Color.Red } }) {
          Image($r('app.media.template'))
            .width(24)
            .height(24)
        }
      }
      .width('100%')
      .padding({ left: 16, right: 16, top: 8, bottom: 8 })

      // Tabs
      Tabs() {
        TabContent() {
          this.OngoingCourses()
        }.tabBar('Ongoing')

        TabContent() {
          Text('Completed courses')
        }.tabBar('Completed')
      }
      .barMode(BarMode.Fixed)
      .onChange((index: number) => {
        this.currentTab = index;
      })

      // Bottom Navigation
      Row() {
        this.NavItem($r('app.media.template'), 'Home')
        this.NavItem($r('app.media.template'), 'Discover')
        this.NavItem($r('app.media.template'), 'My Courses')
        this.NavItem($r('app.media.template'), 'Profile')
      }
      .width('100%')
      .justifyContent(FlexAlign.SpaceAround)
      .position({ y: '94%' })
    }
    .width('100%')
    .height('100%')
  }

  @Builder
  OngoingCourses() {
    List() {
      ForEach(this.ongoingCourses, (course: Course) => {
        ListItem() {
          this.CourseCard(course)
        }
      }, (course: Course) => course.title)
    }
    .width('100%')
    .layoutWeight(1)
  }

  @Builder
  CourseCard(course: Course) {
    Column() {
      Row() {
        Image($r('app.media.template'))
          .width(40)
          .height(40)
          .margin({ right: 8 })
        Column() {
          Text(course.title)
            .fontSize(16)
            .fontWeight(FontWeight.Medium)
          Row() {
            Image($r('app.media.template'))
              .width(20)
              .height(20)
            Text(course.instructor)
              .fontSize(14)
          }
        }
        .alignItems(HorizontalAlign.Start)
        Blank()
        Image($r('app.media.template'))
          .width(24)
          .height(24)
      }
      .width('100%')

      Row() {
        Rating({ rating: course.rating, indicator: true })
        Text(`${course.rating} (${course.reviewsCount} Reviews)`)
          .fontSize(12)
      }
      .width('100%')
      .margin({ top: 8 })

      Row() {
        Image($r('app.media.template'))
          .width(20)
          .height(20)
        Text(course.sessions)
          .fontSize(12)
        Blank()
        Text(`${course.progress}%`)
          .fontSize(12)
      }
      .width('100%')
      .margin({ top: 8 })

      Progress({ value: course.progress, total: 100 })
        .width('100%')
        .height(4)
        .margin({ top: 4 })
    }
    .width('100%')
    .padding(16)
    .backgroundColor(Color.White)
    .borderRadius(8)
    .margin({ bottom: 16 })
    .onClick(() => {
      router.pushUrl({ url: 'pages/CourseDetailPage' })
    })
  }

  @Builder
  NavItem(icon: Resource, label: string) {
    Column() {
      Image(icon)
        .width(24)
        .height(24)
      Text(label)
        .fontSize(12)
    }
  }
}

interface Course {
  title: string;
  instructor: string;
  rating: number;
  reviewsCount: number;
  progress: number;
  sessions: string;
}