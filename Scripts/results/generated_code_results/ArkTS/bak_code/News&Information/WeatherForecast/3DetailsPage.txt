import router from '@ohos.router';

@Entry
@Component
struct DetailsPage {
  @State currentLocation: string = '1600 Charleston Rd, Mountain View'
  @State currentDate: string = 'Jul 15, 2024'
  @State hourlyWeather: HourlyWeather[] = [
    {
      time: '07:00 AM',
      temperature: 16,
      cloudCover: 'overcast clouds',
      precipitation: 0,
      humidity: 81,
      windChill: 16,
      dewPoint: 13,
      cloudCoverPercent: 100,
      moonPhase: 'Waxing gibbous',
      windSpeed: 5,
      pressure: 30,
      uvIndex: 0,
      windDirection: 'West North West'
    },
    {
      time: '08:00 AM',
      temperature: 16,
      cloudCover: 'broken clouds',
      precipitation: 0,
      humidity: 80,
      windChill: 16,
      dewPoint: 12,
      cloudCoverPercent: 81,
      moonPhase: 'Waxing gibbous',
      windSpeed: 5,
      pressure: 30,
      uvIndex: 0,
      windDirection: 'West North West'
    },
    {
      time: '09:00 AM',
      temperature: 16,
      cloudCover: 'broken clouds',
      precipitation: 0,
      humidity: 79,
      windChill: 16,
      dewPoint: 12,
      cloudCoverPercent: 63,
      moonPhase: 'Waxing gibbous',
      windSpeed: 4,
      pressure: 30,
      uvIndex: 0,
      windDirection: 'West North West'
    },
    {
      time: '10:00 AM',
      temperature: 16,
      cloudCover: 'broken clouds',
      precipitation: 0,
      humidity: 79,
      windChill: 16,
      dewPoint: 12,
      cloudCoverPercent: 63,
      moonPhase: 'Waxing gibbous',
      windSpeed: 4,
      pressure: 30,
      uvIndex: 0,
      windDirection: 'West North West'
    }
  ]

  build() {
    Column() {
      Navigation() {
        Text(this.currentLocation)
          .fontSize(20)
          .fontWeight(FontWeight.Bold)
      }
      .title('Hourly weather')
      .titleMode(NavigationTitleMode.Mini)
      .hideBackButton(false)
      .onTitleClick(() => {
        router.back()
      })

      Scroll() {
        Column() {
          ForEach(this.hourlyWeather, (item: HourlyWeather) => {
            this.HourlyWeatherItem(item)
          })
        }
      }
      .scrollBar(BarState.Auto)
      .scrollBarColor(Color.Gray)
      .scrollBarWidth(4)
      .edgeEffect(EdgeEffect.Spring)
    }
    .width('100%')
    .height('100%')
  }

  @Builder
  HourlyWeatherItem(weather: HourlyWeather) {
    Column() {
      Row() {
        Text(weather.time)
          .fontSize(18)
          .fontWeight(FontWeight.Bold)
        Text(`${weather.temperature}Â°C`)
          .fontSize(24)
          .fontWeight(FontWeight.Bold)
        Image($r('app.media.template'))
          .width(40)
          .height(40)
        Text(weather.cloudCover)
          .fontSize(16)
      }
      .width('100%')
      .justifyContent(FlexAlign.SpaceBetween)
      .padding({ top: 10, bottom: 10 })

      Divider().color(Color.Gray).opacity(0.5)

      Grid() {
        GridItem() {
          Text(`Precipitation ${weather.precipitation} mm`)
        }
        GridItem() {
          Text(`Humidity ${weather.humidity}%`)
        }
        GridItem() {
          Text(`Wind chill ${weather.windChill}`)
        }
        GridItem() {
          Text(`Dew point ${weather.dewPoint}`)
        }
        GridItem() {
          Text(`Cloud cover ${weather.cloudCoverPercent}%`)
        }
        GridItem() {
          Text(`Pressure ${weather.pressure} inHg`)
        }
        GridItem() {
          Text(`Moon phases ${weather.moonPhase}`)
        }
        GridItem() {
          Text(`Ultraviolet index ${weather.uvIndex}`)
        }
        GridItem() {
          Text(`Wind speed ${weather.windSpeed} km/h`)
        }
        GridItem() {
          Text(`Wind direction ${weather.windDirection}`)
        }
      }
      .columnsTemplate('1fr 1fr')
      .rowsGap(10)
      .columnsGap(10)
      .padding(10)
    }
    .width('100%')
    .backgroundColor(Color.White)
    .borderRadius(10)
    .margin({ bottom: 10 })
  }
}

interface HourlyWeather {
  time: string
  temperature: number
  cloudCover: string
  precipitation: number
  humidity: number
  windChill: number
  dewPoint: number
  cloudCoverPercent: number
  moonPhase: string
  windSpeed: number
  pressure: number
  uvIndex: number
  windDirection: string
}