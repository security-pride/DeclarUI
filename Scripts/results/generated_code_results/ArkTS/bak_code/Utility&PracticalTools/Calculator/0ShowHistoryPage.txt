import router from '@ohos.router';

@Entry
@Component
struct ShowHistoryPage {
  @State theme: string = 'light';
  @State currentValue: string = '1080';
  @State operation: string = '45 × 24';
  @State history: string[] = ['45 × 24 = 1080', '25 × 2 = 50'];

  @Builder
  CalculatorButton(text: string, type: 'normal' | 'operation' | 'function' | 'equal' = 'normal') {
    Button(text, { type: ButtonType.Normal, stateEffect: true })
      .width('100%')
      .height('100%')
      .fontSize(20)
      .fontColor(type === 'normal' ? (this.theme === 'dark' ? Color.White : Color.Black) : Color.White)
      .backgroundColor(this.getButtonColor(type))
      .onClick(() => this.handleButtonClick(text))
  }

  build() {
    Column() {
      Row() {
        Toggle({ type: ToggleType.Switch, isOn: this.theme === 'dark' })
          .selectedColor(this.theme === 'dark' ? '#007DFF' : '#E3E3E3')
          .switchPointColor('#FFFFFF')
          .onChange((isOn: boolean) => {
            this.theme = isOn ? 'dark' : 'light';
          })
        Text('Switch to Dark')
          .fontSize(14)
          .fontColor(this.theme === 'dark' ? Color.White : Color.Black)
      }
      .width('100%')
      .justifyContent(FlexAlign.SpaceBetween)
      .padding({ left: 16, right: 16, top: 8, bottom: 8 })

      Text(this.operation)
        .fontSize(16)
        .fontColor(Color.Gray)
        .textAlign(TextAlign.End)
        .width('100%')
        .padding({ right: 16 })

      Text(this.currentValue)
        .fontSize(48)
        .fontWeight(FontWeight.Bold)
        .fontColor(this.theme === 'dark' ? Color.White : Color.Black)
        .textAlign(TextAlign.End)
        .width('100%')
        .padding({ right: 16 })

      Scroll() {
        Column() {
          ForEach(this.history, (item: string) => {
            Text(item)
              .fontSize(18)
              .fontColor(this.theme === 'dark' ? Color.White : Color.Black)
              .width('100%')
              .textAlign(TextAlign.End)
              .padding(8)
          })
        }
      }
      .height('50%')
      .width('100%')
      .margin({ top: 16, bottom: 16 })

      Row() {
        Image($r('app.media.template')).width(24).height(24)
        Button('1080', { type: ButtonType.Normal })
          .onClick(() => {
            // Implement functionality
          })
        Image($r('app.media.template')).width(24).height(24)
        Image($r('app.media.template')).width(24).height(24)
      }
      .width('100%')
      .justifyContent(FlexAlign.SpaceBetween)
      .padding({ left: 16, right: 16 })

      Button('Clear History', { type: ButtonType.Normal })
        .width('80%')
        .height(40)
        .fontSize(16)
        .fontColor(Color.White)
        .backgroundColor(Color.Blue)
        .margin({ top: 16, bottom: 16 })
        .onClick(() => {
          router.pushUrl({ url: 'pages/ClearHistoryPage' })
        })

      Row() {
        Column() {
          this.CalculatorButton('/', 'operation')
          this.CalculatorButton('×', 'operation')
          this.CalculatorButton('-', 'operation')
          this.CalculatorButton('+', 'operation')
        }.width('25%')

        Column() {
          this.CalculatorButton('=', 'equal')
        }.width('25%')
      }
      .width('100%')
      .height('20%')
    }
    .width('100%')
    .height('100%')
    .backgroundColor(this.theme === 'dark' ? Color.Black : Color.White)
  }

  private getButtonColor(type: string): Color {
    switch (type) {
      case 'operation':
        return Color.Blue;
      case 'function':
        return Color.Orange;
      case 'equal':
        return Color.Red;
      default:
        return this.theme === 'dark' ? Color.DarkGray : Color.LightGray;
    }
  }

  private handleButtonClick(text: string) {
    // Implement button click logic here
  }
}