import router from '@ohos.router';

interface Task {
  title: string;
  type: string;
  date: string;
  time: string;
  alert: boolean;
}

@Entry
@Component
struct AddTaskPage {
  @State task: Task = {
    title: 'Website redesign',
    type: 'Important',
    date: '18-02-2022',
    time: '9:00 AM-12:00 PM',
    alert: true
  };

  build() {
    Column() {
      Row() {
        Image($r('app.media.template'))
          .width(40)
          .height(40)
          .borderRadius(20)
        Text('Add New Task')
          .fontSize(20)
          .fontWeight(FontWeight.Bold)
          .margin({ left: 16 })
      }
      .width('100%')
      .justifyContent(FlexAlign.Start)
      .padding(16)

      Column() {
        DatePicker({
          start: new Date('2022-02-01'),
          end: new Date('2022-02-28'),
          selected: new Date('2022-02-18')
        })
          .width('100%')
          .onChange((date: DatePickerResult) => {
            this.task.date = `${date.year}-${date.month + 1}-${date.day}`;
          })

        Text('Task title')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .margin({ top: 20, bottom: 8 })
        TextInput({ text: this.task.title })
          .width('100%')
          .height(40)
          .onChange((value: string) => {
            this.task.title = value;
          })

        Text('Task type')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .margin({ top: 20, bottom: 8 })
        Row() {
          Button('Important')
            .backgroundColor(this.task.type === 'Important' ? '#FF6B6B' : '#E0E0E0')
            .fontColor(this.task.type === 'Important' ? Color.White : Color.Black)
            .onClick(() => {
              this.task.type = 'Important';
            })
          Button('Personal')
            .backgroundColor(this.task.type === 'Personal' ? '#FF6B6B' : '#E0E0E0')
            .fontColor(this.task.type === 'Personal' ? Color.White : Color.Black)
            .margin({ left: 16 })
            .onClick(() => {
              this.task.type = 'Personal';
            })
        }

        Text('Choose date & time')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .margin({ top: 20, bottom: 8 })
        Row() {
          Text(this.task.date)
            .fontSize(14)
          Text(this.task.time)
            .fontSize(14)
            .margin({ left: 16 })
        }

        Row() {
          Text('Get alert for this task')
            .fontSize(16)
            .fontWeight(FontWeight.Bold)
          Toggle({ type: ToggleType.Switch, isOn: this.task.alert })
            .onChange((isOn: boolean) => {
              this.task.alert = isOn;
            })
        }
        .width('100%')
        .justifyContent(FlexAlign.SpaceBetween)
        .margin({ top: 20 })

        Button('Done')
          .width('100%')
          .height(50)
          .backgroundColor('#FF6B6B')
          .fontColor(Color.White)
          .margin({ top: 40 })
          .onClick(() => {
            // Save task logic here
            router.back();
          })
      }
      .width('100%')
      .padding(16)
    }
    .height('100%')
  }
}